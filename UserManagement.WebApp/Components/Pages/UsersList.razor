@page "/users"
@using UserManagement.WebApp.Models
@using static System.Net.WebRequestMethods
@attribute [StreamRendering]

<PageTitle>Users List</PageTitle>

@if (users == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<h2>User List</h2>

	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<th>Id</th>
					<th>Forename</th>
					<th>Surname</th>
					<th>Email</th>
					<th>Account Active</th>
					<th>Date of Birth</th>
					<th style="width: 1px;"></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in users)
				{
					<tr>
						<td>
							@item.Id
						</td>
						<td>
							@item.Forename
						</td>
						<td>
							@item.Surname
						</td>
						<td>
							@item.Email
						</td>
						<td>
							@(item.IsActive ? "Yes" : "No")
						</td>
						<td>
							@item.DateOfBirth
						</td>
						<td>
							<div class="dropdown">
								<button type="button" class="btn btn-default dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" id="btnToggleActions">
									Actions
								</button>
								<ul class="dropdown-menu" aria-labelledby="btnToggleActions">
									<li><a class="dropdown-item" href="user/@item.Id">View</a></li>
									<li>
										<button class="dropdown-item" @onclick="() => ShowEditModal(item)">Edit</button>
									</li>
									<li><button @onclick="() => DeleteUser(item)" class="btn btn-default">Delete</button></li>
								</ul>
							</div>
						</td>
					</tr>


				}
			</tbody>
		</table>
		@if (isEditModalVisible && selectedUser != null)
		{
			<UserManagement.WebApp.Components.Shared.EditUserModal User="selectedUser" IsVisible="isEditModalVisible" IsVisibleChanged="@(visible => isEditModalVisible = visible)" OnSave="HandleUserSave" />
		}
	</div>

	<div>
		<div class="btn-group" role="group">
			<button @onclick="ShowAll" class="btn btn-default">Show All</button>
			<button @onclick="ShowActiveOnly" class="btn btn-default">Active Only</button>
			<button class="btn btn-default" @onclick="ShowInactiveOnly">Non Active</button>
		</div>

		<a href="addUser" class="btn btn-primary">Add User</a>


	</div>
	



}
@inject HttpClient Http


@code {

	private UserModel[]? users;
	private bool isEditModalVisible = false;
	private UserModel? selectedUser;

	protected override async Task OnInitializedAsync()
	{
		users = await Http.GetFromJsonAsync<UserModel[]>("users/GetAll");

	}

	private async Task ShowAll()
	{
		users = await Http.GetFromJsonAsync<UserModel[]>("users/GetAll");
	}

	private async Task ShowActiveOnly()
	{
		users = await Http.GetFromJsonAsync<UserModel[]>("users/GetActive/True");

	}
	private async Task ShowInactiveOnly()
	{
		users = await Http.GetFromJsonAsync<UserModel[]>("users/GetActive/False");

	}
	private async Task DeleteUser(UserManagement.WebApp.Models.UserModel user)
	{
			await Http.PostAsJsonAsync("users/delete", user);
			users = await Http.GetFromJsonAsync<UserModel[]>("users/GetAll");	
	}

	private void ShowEditModal(UserModel user)
	{
		selectedUser = user;
		isEditModalVisible = true;
	}

	private async Task HandleUserSave(UserModel updatedUser)
	{
		// Call your API to update the user
		await Http.PostAsJsonAsync("users/update", updatedUser);
		// Refresh the list
		users = await Http.GetFromJsonAsync<UserModel[]>("users/GetAll");
		isEditModalVisible = false;
	}
}
